并发和并行
    并发：单处理器的多个任务执行
    并行：多处理器任务同时执行


并发是为了提高运行在  单处理器 的程序的性能
解释：
    通过现代处理器采用分时分片，即每个任务使用一定的时间，这样的话不同任务的切换就会有开销，即上下文切换，看起来似乎是单任务不并发的要快一点，但使问题不一样的是 阻塞 ，如果
    程序的某个任务因为该程序控制范围外的条件（通常是IO）而导致不能继续执行，那么就说这个任务被阻塞了，如果没有并发，整个程序就会停下来等待，直到外部条件发生变化。但如果采用
    并发的写法，当一个任务阻塞，其他任务仍可以继续执行，利用CPU的性能，这样就不会造成浪费CPU空转，可以继续执行提高比单线程高的性能。
    事实上，如果没有阻塞的话，单处理机器上使用并发是没有意义的


    通常实现并发的方式是使用进程，进程是运行在它自己地址空间的程序，CPU通过分时的方式切换使用权，彼此不会干扰
    但对于Java这种并发系统会共享诸如内存和IO的资源，因此编写多线程的最基本问题就是协调不同线程驱动的任务之间对这些资源的使用，使这些资源不会同时被多个任务访问

Java采用事件驱动任务，线程可以驱动任务，因此需要一种描述任务的方式，Java中就是Runnable接口



（很重要的概念）
注意 任务 和 线程的关系：
    Java采用“线程驱动任务”的方式，线程是一个物理实体，也就是可执行的线程，但任务是一段代码，任务描述的是一个“需要做的事情” 的抽象
    所以 java使用runnable和callable接口来描述 一个 任务，然后创建一个线程去驱动这个任务
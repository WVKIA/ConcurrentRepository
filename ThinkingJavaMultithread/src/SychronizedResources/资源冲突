多线程要解决的问题就是：
    对于并发工作，需要采用某种方式防止两个任务同时访问一个资源，至少关键阶段不能发生这种情况



防止这种冲突的一个方法就是 当资源被一个任务使用时，对其加锁，其他任务必须等待被解锁之后，才能操作资源

Java提供的关键字就是 synchronized
Java中共享资源一般以对象的形式存在，所有的对象都自动有一个单一的锁，也称作“监视器”。当在这个对象上任意调用 synchronized 方法，此对象都会被加锁，这时其他的synchronized方法必须等待前一个方法结束，锁释放，之后，才能获取锁然后执行

一个任务可以多次获得对象的锁，如果一个方法在同一个对象上调用了另一个，就会发生这样的情况。JVM会跟踪对象的锁，然后计数，每方法执行完释放锁后就 减一，直到为 0  释放对象锁，其他任务才可以使用此资源

对于每个类，也有一个锁，作为类Class对象的一部分，所以 synchronized static 方法可以在类范围内防止 static 数据的并发访问

同步规则：
    同步一个变量，读写线程都必须使用相同的监视器锁同步
    如果一个方法处理临界数据，那么所有涉及该数据的方法都必须被同步


Concurrent类库提供了显示互斥机制：Lock对象
    Lock对象必须被显示的创建、锁定和释放

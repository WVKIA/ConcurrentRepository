容器是编程中的基础工具，也包括并发编程，早期的Java为了同步容器，有像Vector和Hashtable这样的，但都是通过synchronized方法进行同步，有很大的性能消耗
在Java1.2之后，提供了Collections的static同步方法，从而同步不同类型的容器。但这种开销依然是通过synchronized加锁机制。

Java5提供了新的多线程容器，通过更灵巧的方式消除加锁，不仅实现多线程并发，也提高了线程安全的性能。

免锁容器的通用策略都是：对容器的修改可以和读取操作同时发生，只有读取者只能看到完成修改的结果即可。
修改是在容器数据结构的某个部分的一个单独副本上执行的，并且这个副本在修改过程中不可视，只有当修改完成时，被修改的结构才会自动与主数据进行交换，之后读取者就可以看到这个修改了


读写锁：
    readWriterLock
